#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('site:server');
var http = require('http');

var async = require('async');

var models = require('../models');

/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server;

function setupServer(callback) {
  
  server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  console.log("Server running on port " + port + " ...");

  callback();
}

/**
 * Initialize ORM.
 */
/* TODO: Replace with migration-based setup! */
async.waterfall([
    function (callback) { return models.sequelize.sync({ force: true }).complete(callback); },
    createExampleQuestions,
    createExampleAnswers,
    setupServer
  ],
  function(err, result) {
    if (!!err) {
      console.log('Error: ', err);
    }
  });

function createExampleQuestions(context, callback) {
  var questionData = [
    { title: "Why don't we do it on the road?" },
    { title: "Is there life on Mars?" },
    { title: "Have you ever seen the rain?" }
  ];

  return models.Question.bulkCreate(questionData).complete(callback);
}

function createExampleAnswers(q, callback) {
  var allAnswerData = [
    { title: "Because it's cold outside!", questionIndex: 0 },
    { title: "Because there's a chicken in the way.", questionIndex: 0 },
    { title: "Yes", questionIndex: 1 },
    { title: "No", questionIndex: 1 },
    { title: "Yes, and it's beautiful.", questionIndex: 2 },
    { title: "Yes, now where's my umbrella?", questionIndex: 2 }
  ];

  var allCallbacks = [
    /* TODO: Do we actually need to perform this #findAll first?
       How else can we make sure that the changes have already been made?
    */
    function(callback) { models.Question.findAll().complete(callback); },
  ];

  for (var answerIndex in allAnswerData) {
    allCallbacks.push(buildAnswerCreationCallback(answerIndex));
  }

  function buildAnswerCreationCallback(answerIndex) {
    var answerData = allAnswerData[answerIndex];
    
    return function(questions, callback) {
      models.Answer.create({ title: answerData.title })
        .then(function(answer) {
          answer
            .setQuestion(questions[answerData.questionIndex])
            .then(function(answer) { callback(null, questions); })
        });
    };
  }

  async.waterfall(allCallbacks,
    function(err, result) {
      callback(err);
    });
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}
