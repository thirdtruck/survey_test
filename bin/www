#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('site:server');
var http = require('http');

var models = require('../models');

/**
 * Get port from environment and store in Express.
 */

var port = parseInt(process.env.PORT, 10) || 3000;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server;

function setupServer() {
  
  server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Initialize ORM.
 */
/* TODO: Replace with migration-based setup! */
models.sequelize.sync({ force: true })
  .then(createExampleQuestion)
  .then(setupServer);

/**
 * Initialize sample questions.
 */
function createExampleQuestion() {
  models.Question
    .find({ where: { title: 'Example Question' }})
    .complete(function(err, question) {
      if (!!err) {
        console.log("Error while searching for existing example question: ", err);
      } else if (!question) {
        console.log("Found no existing example question.");
        models.Question
          .create({
            title: 'Example Question',
          })
          .complete(function(err, question) {
            if (!!err) {
              console.log("Unable to create example question: ", err);
            } else {
              console.log("Created example question.");
              createExampleAnswer(question);
            }
          });
      }
    });
}

function createExampleAnswer(question) {
  models.Answer
    .create({
      title: "An example answer"
    })
    .complete(function(err, answer) {
      if (!!err) {
        console.log("Unable to create example answer: ", err);
      } else {
        question.addAnswer(answer).complete(function(err) {
          if (!!err) {
            console.log("Unable to save example answer to question: ", err);
          } else {
            console.log("Created example answer.");
          }
        });
      }
    });
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}
